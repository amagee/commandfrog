from paramiko.common import cr_byte as cr_byte, cr_byte_value as cr_byte_value, crlf as crlf, linefeed_byte as linefeed_byte, linefeed_byte_value as linefeed_byte_value
from paramiko.py3compat import BytesIO as BytesIO, PY2 as PY2, bytes_types as bytes_types, text_type as text_type, u as u
from paramiko.util import ClosingContextManager as ClosingContextManager
from typing import Any, Optional

class BufferedFile(ClosingContextManager):
    SEEK_SET: int = ...
    SEEK_CUR: int = ...
    SEEK_END: int = ...
    FLAG_READ: int = ...
    FLAG_WRITE: int = ...
    FLAG_APPEND: int = ...
    FLAG_BINARY: int = ...
    FLAG_BUFFERED: int = ...
    FLAG_LINE_BUFFERED: int = ...
    FLAG_UNIVERSAL_NEWLINE: int = ...
    newlines: Any = ...
    def __init__(self) -> None: ...
    def __del__(self) -> None: ...
    def __iter__(self) -> Any: ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def __next__(self): ...
    def readable(self): ...
    def writable(self): ...
    def seekable(self): ...
    def readinto(self, buff: Any): ...
    def read(self, size: Optional[Any] = ...): ...
    def readline(self, size: Optional[Any] = ...): ...
    def readlines(self, sizehint: Optional[Any] = ...): ...
    def seek(self, offset: Any, whence: int = ...) -> None: ...
    def tell(self): ...
    def write(self, data: Any) -> None: ...
    def writelines(self, sequence: Any) -> None: ...
    def xreadlines(self): ...
    @property
    def closed(self): ...
