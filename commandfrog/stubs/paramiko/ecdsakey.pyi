from paramiko.common import four_byte as four_byte
from paramiko.message import Message as Message
from paramiko.pkey import PKey as PKey
from paramiko.ssh_exception import SSHException as SSHException
from paramiko.util import deflate_long as deflate_long
from typing import Any, Optional

class _ECDSACurve:
    nist_name: Any = ...
    key_length: Any = ...
    key_format_identifier: Any = ...
    hash_object: Any = ...
    curve_class: Any = ...
    def __init__(self, curve_class: Any, nist_name: Any) -> None: ...

class _ECDSACurveSet:
    ecdsa_curves: Any = ...
    def __init__(self, ecdsa_curves: Any) -> None: ...
    def get_key_format_identifier_list(self): ...
    def get_by_curve_class(self, curve_class: Any): ...
    def get_by_key_format_identifier(self, key_format_identifier: Any): ...
    def get_by_key_length(self, key_length: Any): ...

class ECDSAKey(PKey):
    verifying_key: Any = ...
    signing_key: Any = ...
    public_blob: Any = ...
    ecdsa_curve: Any = ...
    def __init__(self, msg: Optional[Any] = ..., data: Optional[Any] = ..., filename: Optional[Any] = ..., password: Optional[Any] = ..., vals: Optional[Any] = ..., file_obj: Optional[Any] = ..., validate_point: bool = ...) -> None: ...
    @classmethod
    def supported_key_format_identifiers(cls): ...
    def asbytes(self): ...
    def __hash__(self) -> Any: ...
    def get_name(self): ...
    def get_bits(self): ...
    def can_sign(self): ...
    def sign_ssh_data(self, data: Any): ...
    def verify_ssh_sig(self, data: Any, msg: Any): ...
    def write_private_key_file(self, filename: Any, password: Optional[Any] = ...) -> None: ...
    def write_private_key(self, file_obj: Any, password: Optional[Any] = ...) -> None: ...
    @classmethod
    def generate(cls, curve: Any = ..., progress_func: Optional[Any] = ..., bits: Optional[Any] = ...): ...
