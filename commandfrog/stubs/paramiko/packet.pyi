from paramiko import util as util
from paramiko.common import DEBUG as DEBUG, MSG_NAMES as MSG_NAMES, asbytes as asbytes, cr_byte_value as cr_byte_value, linefeed_byte as linefeed_byte, xffffffff as xffffffff, zero_byte as zero_byte
from paramiko.message import Message as Message
from paramiko.py3compat import byte_ord as byte_ord, u as u
from paramiko.ssh_exception import ProxyCommandFailure as ProxyCommandFailure, SSHException as SSHException
from typing import Any

def compute_hmac(key: Any, message: Any, digest_class: Any): ...

class NeedRekeyException(Exception): ...

def first_arg(e: Any): ...

class Packetizer:
    REKEY_PACKETS: Any = ...
    REKEY_BYTES: Any = ...
    REKEY_PACKETS_OVERFLOW_MAX: Any = ...
    REKEY_BYTES_OVERFLOW_MAX: Any = ...
    def __init__(self, socket: Any) -> None: ...
    @property
    def closed(self): ...
    def set_log(self, log: Any) -> None: ...
    def set_outbound_cipher(self, block_engine: Any, block_size: Any, mac_engine: Any, mac_size: Any, mac_key: Any, sdctr: bool = ..., etm: bool = ...) -> None: ...
    def set_inbound_cipher(self, block_engine: Any, block_size: Any, mac_engine: Any, mac_size: Any, mac_key: Any, etm: bool = ...) -> None: ...
    def set_outbound_compressor(self, compressor: Any) -> None: ...
    def set_inbound_compressor(self, compressor: Any) -> None: ...
    def close(self) -> None: ...
    def set_hexdump(self, hexdump: Any) -> None: ...
    def get_hexdump(self): ...
    def get_mac_size_in(self): ...
    def get_mac_size_out(self): ...
    def need_rekey(self): ...
    def set_keepalive(self, interval: Any, callback: Any) -> None: ...
    def read_timer(self) -> None: ...
    def start_handshake(self, timeout: Any) -> None: ...
    def handshake_timed_out(self): ...
    def complete_handshake(self) -> None: ...
    def read_all(self, n: Any, check_rekey: bool = ...): ...
    def write_all(self, out: Any) -> None: ...
    def readline(self, timeout: Any): ...
    def send_message(self, data: Any) -> None: ...
    def read_message(self): ...
