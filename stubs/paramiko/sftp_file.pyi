from paramiko.common import DEBUG as DEBUG
from paramiko.file import BufferedFile as BufferedFile
from paramiko.py3compat import long as long, u as u
from paramiko.sftp import CMD_ATTRS as CMD_ATTRS, CMD_CLOSE as CMD_CLOSE, CMD_DATA as CMD_DATA, CMD_EXTENDED as CMD_EXTENDED, CMD_FSETSTAT as CMD_FSETSTAT, CMD_FSTAT as CMD_FSTAT, CMD_READ as CMD_READ, CMD_STATUS as CMD_STATUS, CMD_WRITE as CMD_WRITE, SFTPError as SFTPError
from paramiko.sftp_attr import SFTPAttributes as SFTPAttributes
from typing import Any, Optional

class SFTPFile(BufferedFile):
    MAX_REQUEST_SIZE: int = ...
    sftp: Any = ...
    handle: Any = ...
    pipelined: bool = ...
    def __init__(self, sftp: Any, handle: Any, mode: str = ..., bufsize: int = ...) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def settimeout(self, timeout: Any) -> None: ...
    def gettimeout(self): ...
    def setblocking(self, blocking: Any) -> None: ...
    def seekable(self): ...
    def seek(self, offset: Any, whence: int = ...) -> None: ...
    def stat(self): ...
    def chmod(self, mode: Any) -> None: ...
    def chown(self, uid: Any, gid: Any) -> None: ...
    def utime(self, times: Any) -> None: ...
    def truncate(self, size: Any) -> None: ...
    def check(self, hash_algorithm: Any, offset: int = ..., length: int = ..., block_size: int = ...): ...
    def set_pipelined(self, pipelined: bool = ...) -> None: ...
    def prefetch(self, file_size: Optional[Any] = ...) -> None: ...
    def readv(self, chunks: Any) -> None: ...
