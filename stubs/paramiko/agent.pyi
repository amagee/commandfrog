import threading
from paramiko.common import asbytes as asbytes, io_sleep as io_sleep
from paramiko.message import Message as Message
from paramiko.pkey import PKey as PKey
from paramiko.py3compat import byte_chr as byte_chr
from paramiko.ssh_exception import AuthenticationException as AuthenticationException, SSHException as SSHException
from paramiko.util import retry_on_signal as retry_on_signal
from typing import Any

cSSH2_AGENTC_REQUEST_IDENTITIES: Any
SSH2_AGENT_IDENTITIES_ANSWER: int
cSSH2_AGENTC_SIGN_REQUEST: Any
SSH2_AGENT_SIGN_RESPONSE: int

class AgentSSH:
    def __init__(self) -> None: ...
    def get_keys(self): ...

class AgentProxyThread(threading.Thread):
    def __init__(self, agent: Any) -> None: ...
    def run(self) -> None: ...

class AgentLocalProxy(AgentProxyThread):
    def __init__(self, agent: Any) -> None: ...
    def get_connection(self): ...

class AgentRemoteProxy(AgentProxyThread):
    def __init__(self, agent: Any, chan: Any) -> None: ...
    def get_connection(self): ...

class AgentClientProxy:
    thread: Any = ...
    def __init__(self, chanRemote: Any) -> None: ...
    def __del__(self) -> None: ...
    def connect(self): ...
    def close(self) -> None: ...

class AgentServerProxy(AgentSSH):
    thread: Any = ...
    def __init__(self, t: Any) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> None: ...
    def close(self) -> None: ...
    def get_env(self): ...

class AgentRequestHandler:
    def __init__(self, chanClient: Any) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...

class Agent(AgentSSH):
    def __init__(self) -> None: ...
    def close(self) -> None: ...

class AgentKey(PKey):
    agent: Any = ...
    blob: Any = ...
    public_blob: Any = ...
    name: Any = ...
    def __init__(self, agent: Any, blob: Any) -> None: ...
    def asbytes(self): ...
    def get_name(self): ...
    def sign_ssh_data(self, data: Any): ...
