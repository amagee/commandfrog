from paramiko import util as util
from paramiko.channel import Channel as Channel
from paramiko.common import DEBUG as DEBUG, INFO as INFO, o777 as o777
from paramiko.message import Message as Message
from paramiko.py3compat import b as b, long as long, u as u
from paramiko.sftp import BaseSFTP as BaseSFTP, CMD_ATTRS as CMD_ATTRS, CMD_CLOSE as CMD_CLOSE, CMD_EXTENDED as CMD_EXTENDED, CMD_HANDLE as CMD_HANDLE, CMD_LSTAT as CMD_LSTAT, CMD_MKDIR as CMD_MKDIR, CMD_NAME as CMD_NAME, CMD_OPEN as CMD_OPEN, CMD_OPENDIR as CMD_OPENDIR, CMD_READDIR as CMD_READDIR, CMD_READLINK as CMD_READLINK, CMD_REALPATH as CMD_REALPATH, CMD_REMOVE as CMD_REMOVE, CMD_RENAME as CMD_RENAME, CMD_RMDIR as CMD_RMDIR, CMD_SETSTAT as CMD_SETSTAT, CMD_STAT as CMD_STAT, CMD_STATUS as CMD_STATUS, CMD_SYMLINK as CMD_SYMLINK, SFTPError as SFTPError, SFTP_EOF as SFTP_EOF, SFTP_FLAG_APPEND as SFTP_FLAG_APPEND, SFTP_FLAG_CREATE as SFTP_FLAG_CREATE, SFTP_FLAG_EXCL as SFTP_FLAG_EXCL, SFTP_FLAG_READ as SFTP_FLAG_READ, SFTP_FLAG_TRUNC as SFTP_FLAG_TRUNC, SFTP_FLAG_WRITE as SFTP_FLAG_WRITE, SFTP_NO_SUCH_FILE as SFTP_NO_SUCH_FILE, SFTP_OK as SFTP_OK, SFTP_PERMISSION_DENIED as SFTP_PERMISSION_DENIED
from paramiko.sftp_attr import SFTPAttributes as SFTPAttributes
from paramiko.sftp_file import SFTPFile as SFTPFile
from paramiko.ssh_exception import SSHException as SSHException
from paramiko.util import ClosingContextManager as ClosingContextManager
from typing import Any, Optional

b_slash: bytes

class SFTPClient(BaseSFTP, ClosingContextManager):
    sock: Any = ...
    ultra_debug: bool = ...
    request_number: int = ...
    logger: Any = ...
    def __init__(self, sock: Any) -> None: ...
    @classmethod
    def from_transport(cls, t: Any, window_size: Optional[Any] = ..., max_packet_size: Optional[Any] = ...): ...
    def close(self) -> None: ...
    def get_channel(self): ...
    def listdir(self, path: str = ...): ...
    def listdir_attr(self, path: str = ...): ...
    def listdir_iter(self, path: str = ..., read_aheads: int = ...) -> None: ...
    def open(self, filename: Any, mode: str = ..., bufsize: int = ...): ...
    file: Any = ...
    def remove(self, path: Any) -> None: ...
    unlink: Any = ...
    def rename(self, oldpath: Any, newpath: Any) -> None: ...
    def posix_rename(self, oldpath: Any, newpath: Any) -> None: ...
    def mkdir(self, path: Any, mode: Any = ...) -> None: ...
    def rmdir(self, path: Any) -> None: ...
    def stat(self, path: Any): ...
    def lstat(self, path: Any): ...
    def symlink(self, source: Any, dest: Any) -> None: ...
    def chmod(self, path: Any, mode: Any) -> None: ...
    def chown(self, path: Any, uid: Any, gid: Any) -> None: ...
    def utime(self, path: Any, times: Any) -> None: ...
    def truncate(self, path: Any, size: Any) -> None: ...
    def readlink(self, path: Any): ...
    def normalize(self, path: Any): ...
    def chdir(self, path: Optional[Any] = ...) -> None: ...
    def getcwd(self): ...
    def putfo(self, fl: Any, remotepath: Any, file_size: int = ..., callback: Optional[Any] = ..., confirm: bool = ...): ...
    def put(self, localpath: Any, remotepath: Any, callback: Optional[Any] = ..., confirm: bool = ...): ...
    def getfo(self, remotepath: Any, fl: Any, callback: Optional[Any] = ...): ...
    def get(self, remotepath: Any, localpath: Any, callback: Optional[Any] = ...) -> None: ...

class SFTP(SFTPClient): ...
