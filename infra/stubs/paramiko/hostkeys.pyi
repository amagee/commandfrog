from collections.abc import MutableMapping
from paramiko.dsskey import DSSKey as DSSKey
from paramiko.ecdsakey import ECDSAKey as ECDSAKey
from paramiko.ed25519key import Ed25519Key as Ed25519Key
from paramiko.py3compat import b as b, decodebytes as decodebytes, encodebytes as encodebytes, u as u
from paramiko.rsakey import RSAKey as RSAKey
from paramiko.ssh_exception import SSHException as SSHException
from paramiko.util import constant_time_bytes_eq as constant_time_bytes_eq, get_logger as get_logger
from typing import Any, Optional

class HostKeys(MutableMapping):
    def __init__(self, filename: Optional[Any] = ...) -> None: ...
    def add(self, hostname: Any, keytype: Any, key: Any) -> None: ...
    def load(self, filename: Any) -> None: ...
    def save(self, filename: Any) -> None: ...
    def lookup(self, hostname: Any): ...
    def check(self, hostname: Any, key: Any): ...
    def clear(self) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def __getitem__(self, key: Any): ...
    def __delitem__(self, key: Any) -> None: ...
    def __setitem__(self, hostname: Any, entry: Any) -> None: ...
    def keys(self): ...
    def values(self): ...
    @staticmethod
    def hash_host(hostname: Any, salt: Optional[Any] = ...): ...

class InvalidHostKey(Exception):
    line: Any = ...
    exc: Any = ...
    args: Any = ...
    def __init__(self, line: Any, exc: Any) -> None: ...

class HostKeyEntry:
    valid: Any = ...
    hostnames: Any = ...
    key: Any = ...
    def __init__(self, hostnames: Optional[Any] = ..., key: Optional[Any] = ...) -> None: ...
    @classmethod
    def from_line(cls, line: Any, lineno: Optional[Any] = ...): ...
    def to_line(self): ...
