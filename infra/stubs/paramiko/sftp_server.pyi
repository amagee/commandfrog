from paramiko import util as util
from paramiko.common import DEBUG as DEBUG
from paramiko.py3compat import b as b, bytes_types as bytes_types, long as long, string_types as string_types
from paramiko.server import SubsystemHandler as SubsystemHandler
from paramiko.sftp import BaseSFTP as BaseSFTP, CMD_ATTRS as CMD_ATTRS, CMD_CLOSE as CMD_CLOSE, CMD_DATA as CMD_DATA, CMD_EXTENDED as CMD_EXTENDED, CMD_EXTENDED_REPLY as CMD_EXTENDED_REPLY, CMD_FSETSTAT as CMD_FSETSTAT, CMD_FSTAT as CMD_FSTAT, CMD_HANDLE as CMD_HANDLE, CMD_LSTAT as CMD_LSTAT, CMD_MKDIR as CMD_MKDIR, CMD_NAME as CMD_NAME, CMD_NAMES as CMD_NAMES, CMD_OPEN as CMD_OPEN, CMD_OPENDIR as CMD_OPENDIR, CMD_READ as CMD_READ, CMD_READDIR as CMD_READDIR, CMD_READLINK as CMD_READLINK, CMD_REALPATH as CMD_REALPATH, CMD_REMOVE as CMD_REMOVE, CMD_RENAME as CMD_RENAME, CMD_RMDIR as CMD_RMDIR, CMD_SETSTAT as CMD_SETSTAT, CMD_STAT as CMD_STAT, CMD_STATUS as CMD_STATUS, CMD_SYMLINK as CMD_SYMLINK, CMD_WRITE as CMD_WRITE, Message as Message, SFTP_BAD_MESSAGE as SFTP_BAD_MESSAGE, SFTP_DESC as SFTP_DESC, SFTP_EOF as SFTP_EOF, SFTP_FAILURE as SFTP_FAILURE, SFTP_FLAG_APPEND as SFTP_FLAG_APPEND, SFTP_FLAG_CREATE as SFTP_FLAG_CREATE, SFTP_FLAG_EXCL as SFTP_FLAG_EXCL, SFTP_FLAG_READ as SFTP_FLAG_READ, SFTP_FLAG_TRUNC as SFTP_FLAG_TRUNC, SFTP_FLAG_WRITE as SFTP_FLAG_WRITE, SFTP_NO_SUCH_FILE as SFTP_NO_SUCH_FILE, SFTP_OK as SFTP_OK, SFTP_OP_UNSUPPORTED as SFTP_OP_UNSUPPORTED, SFTP_PERMISSION_DENIED as SFTP_PERMISSION_DENIED
from paramiko.sftp_attr import SFTPAttributes as SFTPAttributes
from paramiko.sftp_handle import SFTPHandle as SFTPHandle
from paramiko.sftp_si import SFTPServerInterface as SFTPServerInterface
from typing import Any

class SFTPServer(BaseSFTP, SubsystemHandler):
    logger: Any = ...
    ultra_debug: Any = ...
    next_handle: int = ...
    file_table: Any = ...
    folder_table: Any = ...
    server: Any = ...
    def __init__(self, channel: Any, name: Any, server: Any, sftp_si: Any = ..., *largs: Any, **kwargs: Any) -> None: ...
    sock: Any = ...
    def start_subsystem(self, name: Any, transport: Any, channel: Any) -> None: ...
    def finish_subsystem(self) -> None: ...
    @staticmethod
    def convert_errno(e: Any): ...
    @staticmethod
    def set_file_attr(filename: Any, attr: Any) -> None: ...
