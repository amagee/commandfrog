import threading
from paramiko import util as util
from paramiko.common import AUTH_FAILED as AUTH_FAILED, AUTH_SUCCESSFUL as AUTH_SUCCESSFUL, DEBUG as DEBUG, ERROR as ERROR, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED as OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
from paramiko.py3compat import string_types as string_types
from typing import Any, Optional

class ServerInterface:
    def check_channel_request(self, kind: Any, chanid: Any): ...
    def get_allowed_auths(self, username: Any): ...
    def check_auth_none(self, username: Any): ...
    def check_auth_password(self, username: Any, password: Any): ...
    def check_auth_publickey(self, username: Any, key: Any): ...
    def check_auth_interactive(self, username: Any, submethods: Any): ...
    def check_auth_interactive_response(self, responses: Any): ...
    def check_auth_gssapi_with_mic(self, username: Any, gss_authenticated: Any = ..., cc_file: Optional[Any] = ...): ...
    def check_auth_gssapi_keyex(self, username: Any, gss_authenticated: Any = ..., cc_file: Optional[Any] = ...): ...
    def enable_auth_gssapi(self): ...
    def check_port_forward_request(self, address: Any, port: Any): ...
    def cancel_port_forward_request(self, address: Any, port: Any) -> None: ...
    def check_global_request(self, kind: Any, msg: Any): ...
    def check_channel_pty_request(self, channel: Any, term: Any, width: Any, height: Any, pixelwidth: Any, pixelheight: Any, modes: Any): ...
    def check_channel_shell_request(self, channel: Any): ...
    def check_channel_exec_request(self, channel: Any, command: Any): ...
    def check_channel_subsystem_request(self, channel: Any, name: Any): ...
    def check_channel_window_change_request(self, channel: Any, width: Any, height: Any, pixelwidth: Any, pixelheight: Any): ...
    def check_channel_x11_request(self, channel: Any, single_connection: Any, auth_protocol: Any, auth_cookie: Any, screen_number: Any): ...
    def check_channel_forward_agent_request(self, channel: Any): ...
    def check_channel_direct_tcpip_request(self, chanid: Any, origin: Any, destination: Any): ...
    def check_channel_env_request(self, channel: Any, name: Any, value: Any): ...
    def get_banner(self): ...

class InteractiveQuery:
    name: Any = ...
    instructions: Any = ...
    prompts: Any = ...
    def __init__(self, name: str = ..., instructions: str = ..., *prompts: Any) -> None: ...
    def add_prompt(self, prompt: Any, echo: bool = ...) -> None: ...

class SubsystemHandler(threading.Thread):
    def __init__(self, channel: Any, name: Any, server: Any) -> None: ...
    def get_server(self): ...
    def start_subsystem(self, name: Any, transport: Any, channel: Any) -> None: ...
    def finish_subsystem(self) -> None: ...
