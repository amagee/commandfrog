from paramiko.agent import Agent as Agent
from paramiko.common import DEBUG as DEBUG
from paramiko.config import SSH_PORT as SSH_PORT
from paramiko.dsskey import DSSKey as DSSKey
from paramiko.ecdsakey import ECDSAKey as ECDSAKey
from paramiko.ed25519key import Ed25519Key as Ed25519Key
from paramiko.hostkeys import HostKeys as HostKeys
from paramiko.py3compat import string_types as string_types
from paramiko.rsakey import RSAKey as RSAKey
from paramiko.ssh_exception import BadHostKeyException as BadHostKeyException, NoValidConnectionsError as NoValidConnectionsError, SSHException as SSHException
from paramiko.transport import Transport as Transport
from paramiko.util import ClosingContextManager as ClosingContextManager, retry_on_signal as retry_on_signal
from typing import Any, Optional

class SSHClient(ClosingContextManager):
    def __init__(self) -> None: ...
    def load_system_host_keys(self, filename: Optional[Any] = ...) -> None: ...
    def load_host_keys(self, filename: Any) -> None: ...
    def save_host_keys(self, filename: Any) -> None: ...
    def get_host_keys(self): ...
    def set_log_channel(self, name: Any) -> None: ...
    def set_missing_host_key_policy(self, policy: Any) -> None: ...
    def connect(self, hostname: Any, port: Any = ..., username: Optional[Any] = ..., password: Optional[Any] = ..., pkey: Optional[Any] = ..., key_filename: Optional[Any] = ..., timeout: Optional[Any] = ..., allow_agent: bool = ..., look_for_keys: bool = ..., compress: bool = ..., sock: Optional[Any] = ..., gss_auth: bool = ..., gss_kex: bool = ..., gss_deleg_creds: bool = ..., gss_host: Optional[Any] = ..., banner_timeout: Optional[Any] = ..., auth_timeout: Optional[Any] = ..., gss_trust_dns: bool = ..., passphrase: Optional[Any] = ..., disabled_algorithms: Optional[Any] = ...): ...
    def close(self) -> None: ...
    def exec_command(self, command: Any, bufsize: int = ..., timeout: Optional[Any] = ..., get_pty: bool = ..., environment: Optional[Any] = ...): ...
    def invoke_shell(self, term: str = ..., width: int = ..., height: int = ..., width_pixels: int = ..., height_pixels: int = ..., environment: Optional[Any] = ...): ...
    def open_sftp(self): ...
    def get_transport(self): ...

class MissingHostKeyPolicy:
    def missing_host_key(self, client: Any, hostname: Any, key: Any) -> None: ...

class AutoAddPolicy(MissingHostKeyPolicy):
    def missing_host_key(self, client: Any, hostname: Any, key: Any) -> None: ...

class RejectPolicy(MissingHostKeyPolicy):
    def missing_host_key(self, client: Any, hostname: Any, key: Any) -> None: ...

class WarningPolicy(MissingHostKeyPolicy):
    def missing_host_key(self, client: Any, hostname: Any, key: Any) -> None: ...
