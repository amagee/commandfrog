from paramiko._version import __version_info__ as __version_info__
from paramiko.common import MSG_USERAUTH_REQUEST as MSG_USERAUTH_REQUEST
from paramiko.ssh_exception import SSHException as SSHException
from typing import Any, Optional

GSS_AUTH_AVAILABLE: bool
GSS_EXCEPTIONS: Any

def GSSAuth(auth_method: Any, gss_deleg_creds: bool = ...): ...

class _SSH_GSSAuth:
    cc_file: Any = ...
    def __init__(self, auth_method: Any, gss_deleg_creds: Any) -> None: ...
    def set_service(self, service: Any) -> None: ...
    def set_username(self, username: Any) -> None: ...
    def ssh_gss_oids(self, mode: str = ...): ...
    def ssh_check_mech(self, desired_mech: Any): ...

class _SSH_GSSAPI_OLD(_SSH_GSSAuth):
    def __init__(self, auth_method: Any, gss_deleg_creds: Any) -> None: ...
    def ssh_init_sec_context(self, target: Any, desired_mech: Optional[Any] = ..., username: Optional[Any] = ..., recv_token: Optional[Any] = ...): ...
    def ssh_get_mic(self, session_id: Any, gss_kex: bool = ...): ...
    def ssh_accept_sec_context(self, hostname: Any, recv_token: Any, username: Optional[Any] = ...): ...
    def ssh_check_mic(self, mic_token: Any, session_id: Any, username: Optional[Any] = ...) -> None: ...
    @property
    def credentials_delegated(self): ...
    def save_client_creds(self, client_token: Any) -> None: ...

class _SSH_GSSAPI_NEW(_SSH_GSSAuth):
    def __init__(self, auth_method: Any, gss_deleg_creds: Any) -> None: ...
    def ssh_init_sec_context(self, target: Any, desired_mech: Optional[Any] = ..., username: Optional[Any] = ..., recv_token: Optional[Any] = ...): ...
    def ssh_get_mic(self, session_id: Any, gss_kex: bool = ...): ...
    def ssh_accept_sec_context(self, hostname: Any, recv_token: Any, username: Optional[Any] = ...): ...
    def ssh_check_mic(self, mic_token: Any, session_id: Any, username: Optional[Any] = ...) -> None: ...
    @property
    def credentials_delegated(self): ...
    def save_client_creds(self, client_token: Any) -> None: ...

class _SSH_SSPI(_SSH_GSSAuth):
    def __init__(self, auth_method: Any, gss_deleg_creds: Any) -> None: ...
    def ssh_init_sec_context(self, target: Any, desired_mech: Optional[Any] = ..., username: Optional[Any] = ..., recv_token: Optional[Any] = ...): ...
    def ssh_get_mic(self, session_id: Any, gss_kex: bool = ...): ...
    def ssh_accept_sec_context(self, hostname: Any, username: Any, recv_token: Any): ...
    def ssh_check_mic(self, mic_token: Any, session_id: Any, username: Optional[Any] = ...) -> None: ...
    @property
    def credentials_delegated(self): ...
    def save_client_creds(self, client_token: Any) -> None: ...
