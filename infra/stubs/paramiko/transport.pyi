import threading
from paramiko import util as util
from paramiko.auth_handler import AuthHandler as AuthHandler
from paramiko.channel import Channel as Channel
from paramiko.common import CONNECTION_FAILED_CODE as CONNECTION_FAILED_CODE, DEBUG as DEBUG, DEFAULT_MAX_PACKET_SIZE as DEFAULT_MAX_PACKET_SIZE, DEFAULT_WINDOW_SIZE as DEFAULT_WINDOW_SIZE, ERROR as ERROR, HIGHEST_USERAUTH_MESSAGE_ID as HIGHEST_USERAUTH_MESSAGE_ID, INFO as INFO, MAX_WINDOW_SIZE as MAX_WINDOW_SIZE, MIN_PACKET_SIZE as MIN_PACKET_SIZE, MIN_WINDOW_SIZE as MIN_WINDOW_SIZE, MSG_CHANNEL_CLOSE as MSG_CHANNEL_CLOSE, MSG_CHANNEL_DATA as MSG_CHANNEL_DATA, MSG_CHANNEL_EOF as MSG_CHANNEL_EOF, MSG_CHANNEL_EXTENDED_DATA as MSG_CHANNEL_EXTENDED_DATA, MSG_CHANNEL_FAILURE as MSG_CHANNEL_FAILURE, MSG_CHANNEL_OPEN as MSG_CHANNEL_OPEN, MSG_CHANNEL_OPEN_FAILURE as MSG_CHANNEL_OPEN_FAILURE, MSG_CHANNEL_OPEN_SUCCESS as MSG_CHANNEL_OPEN_SUCCESS, MSG_CHANNEL_REQUEST as MSG_CHANNEL_REQUEST, MSG_CHANNEL_SUCCESS as MSG_CHANNEL_SUCCESS, MSG_CHANNEL_WINDOW_ADJUST as MSG_CHANNEL_WINDOW_ADJUST, MSG_DEBUG as MSG_DEBUG, MSG_DISCONNECT as MSG_DISCONNECT, MSG_GLOBAL_REQUEST as MSG_GLOBAL_REQUEST, MSG_IGNORE as MSG_IGNORE, MSG_KEXINIT as MSG_KEXINIT, MSG_NAMES as MSG_NAMES, MSG_NEWKEYS as MSG_NEWKEYS, MSG_REQUEST_FAILURE as MSG_REQUEST_FAILURE, MSG_REQUEST_SUCCESS as MSG_REQUEST_SUCCESS, MSG_UNIMPLEMENTED as MSG_UNIMPLEMENTED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED as OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED, OPEN_SUCCEEDED as OPEN_SUCCEEDED, WARNING as WARNING, cMSG_CHANNEL_OPEN as cMSG_CHANNEL_OPEN, cMSG_CHANNEL_OPEN_FAILURE as cMSG_CHANNEL_OPEN_FAILURE, cMSG_CHANNEL_OPEN_SUCCESS as cMSG_CHANNEL_OPEN_SUCCESS, cMSG_GLOBAL_REQUEST as cMSG_GLOBAL_REQUEST, cMSG_IGNORE as cMSG_IGNORE, cMSG_KEXINIT as cMSG_KEXINIT, cMSG_NEWKEYS as cMSG_NEWKEYS, cMSG_REQUEST_FAILURE as cMSG_REQUEST_FAILURE, cMSG_REQUEST_SUCCESS as cMSG_REQUEST_SUCCESS, cMSG_UNIMPLEMENTED as cMSG_UNIMPLEMENTED, xffffffff as xffffffff
from paramiko.compress import ZlibCompressor as ZlibCompressor, ZlibDecompressor as ZlibDecompressor
from paramiko.dsskey import DSSKey as DSSKey
from paramiko.ecdsakey import ECDSAKey as ECDSAKey
from paramiko.ed25519key import Ed25519Key as Ed25519Key
from paramiko.kex_curve25519 import KexCurve25519 as KexCurve25519
from paramiko.kex_ecdh_nist import KexNistp256 as KexNistp256, KexNistp384 as KexNistp384, KexNistp521 as KexNistp521
from paramiko.kex_gex import KexGex as KexGex, KexGexSHA256 as KexGexSHA256
from paramiko.kex_group1 import KexGroup1 as KexGroup1
from paramiko.kex_group14 import KexGroup14 as KexGroup14, KexGroup14SHA256 as KexGroup14SHA256
from paramiko.kex_group16 import KexGroup16SHA512 as KexGroup16SHA512
from paramiko.kex_gss import KexGSSGex as KexGSSGex, KexGSSGroup1 as KexGSSGroup1, KexGSSGroup14 as KexGSSGroup14
from paramiko.message import Message as Message
from paramiko.packet import NeedRekeyException as NeedRekeyException, Packetizer as Packetizer
from paramiko.primes import ModulusPack as ModulusPack
from paramiko.py3compat import PY2 as PY2, b as b, byte_ord as byte_ord, input as input, long as long, string_types as string_types
from paramiko.rsakey import RSAKey as RSAKey
from paramiko.server import ServerInterface as ServerInterface
from paramiko.sftp_client import SFTPClient as SFTPClient
from paramiko.ssh_exception import BadAuthenticationType as BadAuthenticationType, ChannelException as ChannelException, ProxyCommandFailure as ProxyCommandFailure, SSHException as SSHException
from paramiko.ssh_gss import GSSAuth as GSSAuth
from paramiko.util import ClosingContextManager as ClosingContextManager, clamp_value as clamp_value, retry_on_signal as retry_on_signal
from typing import Any, Optional

class Transport(threading.Thread, ClosingContextManager):
    active: bool = ...
    hostname: Any = ...
    sock: Any = ...
    packetizer: Any = ...
    local_version: Any = ...
    remote_version: str = ...
    local_cipher: str = ...
    local_kex_init: Any = ...
    local_mac: Any = ...
    local_compression: Any = ...
    session_id: Any = ...
    host_key_type: Any = ...
    host_key: Any = ...
    use_gss_kex: Any = ...
    gss_kex_used: bool = ...
    kexgss_ctxt: Any = ...
    gss_host: Any = ...
    kex_engine: Any = ...
    H: Any = ...
    K: Any = ...
    initial_kex_done: bool = ...
    in_kex: bool = ...
    authenticated: bool = ...
    lock: Any = ...
    channel_events: Any = ...
    channels_seen: Any = ...
    default_max_packet_size: Any = ...
    default_window_size: Any = ...
    saved_exception: Any = ...
    clear_to_send: Any = ...
    clear_to_send_lock: Any = ...
    clear_to_send_timeout: float = ...
    log_name: str = ...
    logger: Any = ...
    auth_handler: Any = ...
    global_response: Any = ...
    completion_event: Any = ...
    banner_timeout: int = ...
    handshake_timeout: int = ...
    auth_timeout: int = ...
    disabled_algorithms: Any = ...
    server_mode: bool = ...
    server_object: Any = ...
    server_key_dict: Any = ...
    server_accepts: Any = ...
    server_accept_cv: Any = ...
    subsystem_table: Any = ...
    def __init__(self, sock: Any, default_window_size: Any = ..., default_max_packet_size: Any = ..., gss_kex: bool = ..., gss_deleg_creds: bool = ..., disabled_algorithms: Optional[Any] = ...): ...
    @property
    def preferred_ciphers(self): ...
    @property
    def preferred_macs(self): ...
    @property
    def preferred_keys(self): ...
    @property
    def preferred_kex(self): ...
    @property
    def preferred_compression(self): ...
    def atfork(self) -> None: ...
    def get_security_options(self): ...
    def set_gss_host(self, gss_host: Any, trust_dns: bool = ..., gssapi_requested: bool = ...) -> None: ...
    def start_client(self, event: Optional[Any] = ..., timeout: Optional[Any] = ...) -> None: ...
    def start_server(self, event: Optional[Any] = ..., server: Optional[Any] = ...) -> None: ...
    def add_server_key(self, key: Any) -> None: ...
    def get_server_key(self): ...
    @staticmethod
    def load_server_moduli(filename: Optional[Any] = ...): ...
    def close(self) -> None: ...
    def get_remote_server_key(self): ...
    def is_active(self): ...
    def open_session(self, window_size: Optional[Any] = ..., max_packet_size: Optional[Any] = ..., timeout: Optional[Any] = ...): ...
    def open_x11_channel(self, src_addr: Optional[Any] = ...): ...
    def open_forward_agent_channel(self): ...
    def open_forwarded_tcpip_channel(self, src_addr: Any, dest_addr: Any): ...
    def open_channel(self, kind: Any, dest_addr: Optional[Any] = ..., src_addr: Optional[Any] = ..., window_size: Optional[Any] = ..., max_packet_size: Optional[Any] = ..., timeout: Optional[Any] = ...): ...
    def request_port_forward(self, address: Any, port: Any, handler: Optional[Any] = ...): ...
    def cancel_port_forward(self, address: Any, port: Any) -> None: ...
    def open_sftp_client(self): ...
    def send_ignore(self, byte_count: Optional[Any] = ...) -> None: ...
    def renegotiate_keys(self) -> None: ...
    def set_keepalive(self, interval: Any): ...
    def global_request(self, kind: Any, data: Optional[Any] = ..., wait: bool = ...): ...
    def accept(self, timeout: Optional[Any] = ...): ...
    def connect(self, hostkey: Optional[Any] = ..., username: str = ..., password: Optional[Any] = ..., pkey: Optional[Any] = ..., gss_host: Optional[Any] = ..., gss_auth: bool = ..., gss_kex: bool = ..., gss_deleg_creds: bool = ..., gss_trust_dns: bool = ...) -> None: ...
    def get_exception(self): ...
    def set_subsystem_handler(self, name: Any, handler: Any, *larg: Any, **kwarg: Any) -> None: ...
    def is_authenticated(self): ...
    def get_username(self): ...
    def get_banner(self): ...
    def auth_none(self, username: Any): ...
    def auth_password(self, username: Any, password: Any, event: Optional[Any] = ..., fallback: bool = ...): ...
    def auth_publickey(self, username: Any, key: Any, event: Optional[Any] = ...): ...
    def auth_interactive(self, username: Any, handler: Any, submethods: str = ...): ...
    def auth_interactive_dumb(self, username: Any, handler: Optional[Any] = ..., submethods: str = ...): ...
    def auth_gssapi_with_mic(self, username: Any, gss_host: Any, gss_deleg_creds: Any): ...
    def auth_gssapi_keyex(self, username: Any): ...
    def set_log_channel(self, name: Any) -> None: ...
    def get_log_channel(self): ...
    def set_hexdump(self, hexdump: Any) -> None: ...
    def get_hexdump(self): ...
    def use_compression(self, compress: bool = ...) -> None: ...
    def getpeername(self): ...
    def stop_thread(self) -> None: ...
    sys: Any = ...
    def run(self) -> None: ...

class SecurityOptions:
    def __init__(self, transport: Any) -> None: ...
    @property
    def ciphers(self): ...
    @ciphers.setter
    def ciphers(self, x: Any) -> None: ...
    @property
    def digests(self): ...
    @digests.setter
    def digests(self, x: Any) -> None: ...
    @property
    def key_types(self): ...
    @key_types.setter
    def key_types(self, x: Any) -> None: ...
    @property
    def kex(self): ...
    @kex.setter
    def kex(self, x: Any) -> None: ...
    @property
    def compression(self): ...
    @compression.setter
    def compression(self, x: Any) -> None: ...

class ChannelMap:
    def __init__(self) -> None: ...
    def put(self, chanid: Any, chan: Any) -> None: ...
    def get(self, chanid: Any): ...
    def delete(self, chanid: Any) -> None: ...
    def values(self): ...
    def __len__(self): ...
