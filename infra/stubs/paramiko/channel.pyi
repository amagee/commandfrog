from paramiko import pipe as pipe, util as util
from paramiko.buffered_pipe import BufferedPipe as BufferedPipe, PipeTimeout as PipeTimeout
from paramiko.common import DEBUG as DEBUG, ERROR as ERROR, cMSG_CHANNEL_CLOSE as cMSG_CHANNEL_CLOSE, cMSG_CHANNEL_DATA as cMSG_CHANNEL_DATA, cMSG_CHANNEL_EOF as cMSG_CHANNEL_EOF, cMSG_CHANNEL_EXTENDED_DATA as cMSG_CHANNEL_EXTENDED_DATA, cMSG_CHANNEL_FAILURE as cMSG_CHANNEL_FAILURE, cMSG_CHANNEL_REQUEST as cMSG_CHANNEL_REQUEST, cMSG_CHANNEL_SUCCESS as cMSG_CHANNEL_SUCCESS, cMSG_CHANNEL_WINDOW_ADJUST as cMSG_CHANNEL_WINDOW_ADJUST
from paramiko.file import BufferedFile as BufferedFile
from paramiko.message import Message as Message
from paramiko.py3compat import bytes_types as bytes_types
from paramiko.ssh_exception import SSHException as SSHException
from paramiko.util import ClosingContextManager as ClosingContextManager
from typing import Any, Optional

def open_only(func: Any): ...

class Channel(ClosingContextManager):
    chanid: Any = ...
    remote_chanid: int = ...
    transport: Any = ...
    active: bool = ...
    eof_received: int = ...
    eof_sent: int = ...
    in_buffer: Any = ...
    in_stderr_buffer: Any = ...
    timeout: Any = ...
    closed: bool = ...
    ultra_debug: bool = ...
    lock: Any = ...
    out_buffer_cv: Any = ...
    in_window_size: int = ...
    out_window_size: int = ...
    in_max_packet_size: int = ...
    out_max_packet_size: int = ...
    in_window_threshold: int = ...
    in_window_sofar: int = ...
    status_event: Any = ...
    logger: Any = ...
    event: Any = ...
    event_ready: bool = ...
    combine_stderr: bool = ...
    exit_status: int = ...
    origin_addr: Any = ...
    def __init__(self, chanid: Any) -> None: ...
    def __del__(self) -> None: ...
    def get_pty(self, term: str = ..., width: int = ..., height: int = ..., width_pixels: int = ..., height_pixels: int = ...) -> None: ...
    def invoke_shell(self) -> None: ...
    def exec_command(self, command: Any) -> None: ...
    def invoke_subsystem(self, subsystem: Any) -> None: ...
    def resize_pty(self, width: int = ..., height: int = ..., width_pixels: int = ..., height_pixels: int = ...) -> None: ...
    def update_environment(self, environment: Any) -> None: ...
    def set_environment_variable(self, name: Any, value: Any) -> None: ...
    def exit_status_ready(self): ...
    def recv_exit_status(self): ...
    def send_exit_status(self, status: Any) -> None: ...
    def request_x11(self, screen_number: int = ..., auth_protocol: Optional[Any] = ..., auth_cookie: Optional[Any] = ..., single_connection: bool = ..., handler: Optional[Any] = ...): ...
    def request_forward_agent(self, handler: Any): ...
    def get_transport(self): ...
    def set_name(self, name: Any) -> None: ...
    def get_name(self): ...
    def get_id(self): ...
    def set_combine_stderr(self, combine: Any): ...
    def settimeout(self, timeout: Any) -> None: ...
    def gettimeout(self): ...
    def setblocking(self, blocking: Any) -> None: ...
    def getpeername(self): ...
    def close(self) -> None: ...
    def recv_ready(self): ...
    def recv(self, nbytes: Any): ...
    def recv_stderr_ready(self): ...
    def recv_stderr(self, nbytes: Any): ...
    def send_ready(self): ...
    def send(self, s: Any): ...
    def send_stderr(self, s: Any): ...
    def sendall(self, s: Any) -> None: ...
    def sendall_stderr(self, s: Any) -> None: ...
    def makefile(self, *params: Any): ...
    def makefile_stderr(self, *params: Any): ...
    def makefile_stdin(self, *params: Any): ...
    def fileno(self): ...
    def shutdown(self, how: Any) -> None: ...
    def shutdown_read(self) -> None: ...
    def shutdown_write(self) -> None: ...

class ChannelFile(BufferedFile):
    channel: Any = ...
    def __init__(self, channel: Any, mode: str = ..., bufsize: int = ...) -> None: ...

class ChannelStderrFile(ChannelFile): ...

class ChannelStdinFile(ChannelFile):
    def close(self) -> None: ...
